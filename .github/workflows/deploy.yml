name: CI/CD Pipeline test

on:
  push:
    branches:
      - main

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # - name: Run unit test
      #   run: TODO

      - name: Generate dummy .env for CI
        run: |
          echo "POSTGRES_USER=test_user" >> .env
          echo "POSTGRES_PASSWORD=test_pass" >> .env
          echo "POSTGRES_AUTH_DB=auth_db" >> .env
          echo "POSTGRES_AUTH_HOST=auth_db" >> .env
          echo "POSTGRES_TOURNAMENT_DB=tournament_db" >> .env
          echo "POSTGRES_TOURNAMENT_HOST=tournament_db" >> .env
          echo "POSTGRES_HISTORY_DB=history_db" >> .env
          echo "POSTGRES_HISTORY_HOST=history_db" >> .env
          echo "CLOUDFLARE_TUNNEL_TOKEN=dummy" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "SECRET_KEY=test-secret-key" >> .env
          echo "SECRET_KEY_HISTORY=test-secret-key-history" >> .env
          echo "SECRET_KEY_TOURNAMENT=test-secret-key-tournament" >> .env
          echo "JWT_ALGO=HS256" >> .env

      - name: Build Docker images
        run: docker compose build

      - name: Integration Test( backend auth-service)
        run: docker compose run --rm auth-service python manage.py test auth_app

      - name: Clean up containers
        run: docker compose down

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PA_TOKEN }} #expire in 90 days!

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mini_transcendence:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/mini_transcendence:${{ github.sha }}

      - name: Echo CI stage
        run: echo "CI Stage Code checkout complete."

#   cd:
#     name: Continuous Deployment
#     runs-on: ubuntu-latest
#     needs: ci

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Echo CD stage
#         run: echo "CD Stage Preparing to deploy to EC2..."

#       - name: Generate .env from GitHub Secrets
#         run: |
#           echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
#           echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
#           echo "POSTGRES_AUTH_DB=${{ secrets.POSTGRES_AUTH_DB }}" >> .env
#           echo "POSTGRES_HISTORY_DB=${{ secrets.POSTGRES_HISTORY_DB }}" >> .env
#           echo "POSTGRES_TOURNAMENT_DB=${{ secrets.POSTGRES_TOURNAMENT_DB }}" >> .env
#           echo "POSTGRES_AUTH_HOST=${{ secrets.POSTGRES_AUTH_HOST }}" >> .env
#           echo "POSTGRES_HISTORY_HOST=${{ secrets.POSTGRES_HISTORY_HOST }}" >> .env
#           echo "POSTGRES_TOURNAMENT_HOST=${{ secrets.POSTGRES_TOURNAMENT_HOST }}" >> .env
#           echo "POSTGRES_PORT =${{ secrets.POSTGRES_PORT }}" >> .env
#           echo "CLOUDFLARE_TUNNEL_TOKEN=${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}" >> .env
#           echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
#           echo "SECRET_KEY_HISTORY=${{ secrets.SECRET_KEY_HISTORY }}" >> .env
#           echo "SECRET_KEY_TOURNAMENT=${{ secrets.SECRET_KEY_TOURNAMENT }}" >> .env
#           echo "JWT_ALGO=${{ secrets.JWT_ALGO }}" >> .env

#       - name: Set up SSH agent
#         uses: webfactory/ssh-agent@v0.5.4
#         with:
#           ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

#       - name: Copy code to EC2
#         run: |
#           ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p /home/${{ secrets.EC2_USER }}/mini_transcendence/"
#           scp -o StrictHostKeyChecking=no -r . ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/mini_transcendence/

#       - name: Transfer .env file to EC2
#         run: |
#           # The source is .env (from the runner's current directory)
#           # The target is the full path on EC2: /home/ubuntu/mini_transcendence/
#           scp -o StrictHostKeyChecking=no .env ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/mini_transcendence/

#       - name: Deploy to EC2
#         run: |
#           echo "CD Stage: Connecting to EC2 instance..."
#           ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
#             echo "CD Stage: Navigating to project directory..."
#             cd mini_transcendence/
#             echo "CD Stage: Pulling latest code from Git..."
#             git pull origin main
#             echo "CD Stage: Stopping running containers..."
#             sudo docker compose down
#             echo "CD Stage: Building and restarting containers..."
#             sudo docker compose up --build -d
#             echo "CD Stage: Deployment complete."
#           EOF

