# Nginx upstream configuration file
# Defines backend service groups for load balancing and proxying

# Authentication service upstream group running on port 8001
# Used for handling auth-related requests

# Tournament service upstream group running on port 8003
# Manages tournament functionality and game matchmaking

# Match history service upstream group running on port 8002
# Handles storing and retrieving player match history data
upstream auth-service {
	server auth-service:8001;
}

upstream tournament-service
{
	server tournament-service:8003;
}

upstream history-service {
		server history-service:8002;
}

# upstream grafana {
#     server grafana:3000;
# }

server {
	# NGINX Server Configuration for SSL/TLS and Security Headers
	#
	# SSL Configuration:
	# - Listens on port 443 for HTTPS connections
	# - Uses self-signed certificates
	# - Implements TLS 1.2 and 1.3 protocols
	# - Uses strong cipher preferences for encryption
	# - Configures SSL session handling
	#
	# Security Headers:
	# - X-Frame-Options: Prevents clickjacking attacks
	# - X-Content-Type-Options: Prevents MIME type sniffing
	# - X-XSS-Protection: Enables XSS filtering
	# - Referrer-Policy: Controls referrer information
	#
	# Content Security Policy (CSP):
	# - Restricts resource loading to specific sources
	# - Allows scripts from self and jsdelivr.net
	# - Allows styles from self, jsdelivr.net, and Google Fonts
	# - Allows fonts from Google Fonts and jsdelivr.net
	# - Allows images from self and local media paths
    listen 80;
	#server_name ec2-51-20-85-225.eu-north-1.compute.amazonaws.com localhost;
	server_name transcendence.alematta.com www.transcendence.alematta.com;
	#ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
	#ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
	#ssl_protocols TLSv1.2 TLSv1.3;
	#ssl_prefer_server_ciphers on;
	#ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
	#ssl_session_cache shared:SSL:10m;
	#ssl_session_timeout 1h;

	add_header X-Frame-Options "SAMEORIGIN" always;
	add_header X-Content-Type-Options "nosniff" always;
	add_header X-XSS-Protection "1; mode=block" always;
	add_header Referrer-Policy "strict-origin-when-cross-origin" always;
	add_header Content-Security-Policy "
		default-src 'self';
		worker-src 'self' blob:;
		connect-src 'self' https://threejs.org https://grafana.com https://feeds.elastic.co https://telemetry.elastic.co;
		script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net;
		style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://fonts.googleapis.com;
		font-src 'self' https://fonts.gstatic.com https://cdn.jsdelivr.net https://threejs.org;
		img-src 'self' data: https://transcendence.alematta.com/media/ https://www.transcendence.alematta.com/media/ https://grafana.com;
		base-uri 'self';
		form-action 'self';
		manifest-src 'self';
	" always;

		#img-src 'self' data: http://localhost/media/ https://localhost/media/ https://grafana.com;


	location / {
		# root of the static frontend files
		root /var/www/html;
		index index.html;
		try_files $uri $uri/ /index.html;
	}

	# Location block for handling media file requests
	#
	# This configuration block manages static media file serving with the following features:
	#
	# 1. File Serving:
	#    - Serves files directly from /app/media/ directory
	#    - Disables directory listing (autoindex off)
	#
	# 2. Image Handling:
	#    - Special handling for image files (jpg, jpeg, gif, png, webp)
	#    - 30-day cache expiration for images
	#    - Prevents image transformation
	#
	# 3. Security Measures:
	#    - Blocks execution of script files (php, pl, py, jsp, asp, sh, cgi)
	#    - Implements CORS with specific origin
	#    - Prevents MIME-type sniffing
	#
	# 4. Caching Strategy:
	#    - 7-day cache expiration for non-image files
	#    - Implements immutable cache control
	#
	# 5. Debugging:
	#    - Logs errors to /var/log/nginx/media-error.log
	#    - Includes debug header with request filename
	#
	# Note: This configuration assumes the existence of a valid media directory
	# at /app/media/ and proper nginx mime.types configuration.
	location /media/ {
		# Direct file serving instead of proxying to Django
		alias /app/media/;
		autoindex off;

		include mime.types;

		location ~* \.(?:jpg|jpeg|gif|png|webp)$ {
			expires 30d;
			add_header Cache-Control "public, no-transform";
			try_files $uri =404;
		}

		if ($request_filename ~* \.(php|pl|py|jsp|asp|sh|cgi)$) {
			return 403;
		}

		expires 7d;
		add_header Cache-Control "public, max-age=604800, immutable";

		add_header X-Content-Type-Options "nosniff";
		add_header Access-Control-Allow-Origin "https://transcendence.alematta.com";
		#add_header Access-Control-Allow-Origin "https://ec2-51-20-85-225.eu-north-1.compute.amazonaws.com";

		error_log /var/log/nginx/media-error.log debug;
		add_header X-Debug-Path $request_filename;
	}

    # API Gateway
	# Nginx configuration for API gateway
	#
	# Main /api/ location block handles all API requests with:
	# - Rate limiting using api_limit zone with burst=50
	# - Standard proxy headers for proper request forwarding
	# - JWT validation middleware for protected routes
	# - User ID extraction from JWT for authenticated requests
	#
	# Routes:
	# Public routes (no auth required):
	# - /api/auth/   -> auth-service (authentication endpoints)
	# - /api/oauth/  -> auth-service (OAuth integration endpoints)
	# - /api/user/   -> auth-service (user management endpoints)
	#
	# Protected routes (requires valid JWT):
	# - /api/tournament/ -> tournament-service (game tournament endpoints)
	# - /api/history/    -> history-service (match history endpoints)
    location /api/ {
		# rate limiting
		limit_req zone=api_limit burst=30;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
        # JWT validation for all API routes
        auth_request /_validate_jwt;
        auth_request_set $user_id $upstream_http_x_user_id;
        proxy_set_header X-User-ID $user_id;

        # Route definitions
		location /api/auth/ {
			limit_req zone=auth_limit burst=10 nodelay;
			limit_req_status 429;
			auth_request off;
			proxy_pass http://auth-service;
		}

        location /api/user/ {
			limit_req zone=auth_limit burst=10 nodelay;
			limit_req_status 429;
			auth_request off;
            proxy_pass http://auth-service;
        }

        location /api/tournament/ {
			limit_req zone=api_limit burst=30 nodelay;
            limit_req_status 429;
            proxy_pass http://tournament-service;
        }

        location /api/history/ {
			limit_req zone=api_limit burst=30 nodelay;
            limit_req_status 429;
            proxy_pass http://history-service;
        }
    }

    # JWT validation endpoint
    location = /_validate_jwt {
        internal;
        proxy_pass http://auth-service/api/auth/validate/;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
  	    proxy_set_header X-Original-URI $request_uri;
    }
}
