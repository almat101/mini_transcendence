services:
  proxy:
    image: proxy
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: proxy
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - auth-service
      - history-service
      - tournament-service
    volumes:
      - media:/app/media:rw
      - proxy_logs:/var/log/nginx
    healthcheck:
      test: ["CMD-SHELL", "curl -f -k http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - internal

  auth-service:
    image: auth-service
    container_name: auth-service
    build:
      context: ./backend/auth_service
      dockerfile: Dockerfile
    command: sh /app/start.sh
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - media:/app/media:rw
    depends_on:
      auth_db:
        condition: service_healthy
    networks:
      - internal

  auth_db:
    image: postgres:15-alpine
    container_name: auth_db
    env_file: ".env"
    # environment:
    #  - POSTGRES_USER=${POSTGRES_USER}
    #  - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #  - POSTGRES_DB=${POSTGRES_AUTH_DB}
    #  - POSTGRES_HOST=${POSTGRES_AUTH_HOST}
    restart: always
    volumes:
      - postgres_auth:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_AUTH_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal


  tournament-service:
    image: tournament-service
    container_name: tournament-service
    build:
      context: ./backend/tournament-service
      dockerfile: Dockerfile
    command: sh /app/start.sh
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      tournament_db:
        condition: service_healthy
    networks:
      - internal

  tournament_db:
    image: postgres:15-alpine
    container_name: tournament_db
    env_file: ".env"
    # environment:
    #  - POSTGRES_USER=${POSTGRES_USER}
    #  - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #  - POSTGRES_DB=${POSTGRES_TOURNAMENT_DB}
    #  - POSTGRES_HOST=${POSTGRES_TOURNAMENT_HOST}
    restart: always
    volumes:
      - postgres_tournament:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_TOURNAMENT_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  history-service:
    image: history-service
    container_name: history-service
    build:
      context: ./backend/history
      dockerfile: Dockerfile
    command: sh /app/start.sh
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      history_db:
        condition: service_healthy
    networks:
      - internal

  history_db:
    image: postgres:15-alpine
    container_name: history_db
    env_file: ".env"
    # environment:
    #  - POSTGRES_USER=${POSTGRES_USER}
    #  - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #  - POSTGRES_DB=${POSTGRES_HISTORY_DB}
    #  - POSTGRES_HOST=${POSTGRES_HISTORY_HOST}
    restart: always
    volumes:
      - postgres_history:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_HISTORY_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - internal

networks:
  internal:
    driver: bridge

volumes:
  proxy_logs:
  postgres_auth:
  postgres_tournament:
  postgres_history:
  media:
